

How to expose ESB:

  Proxies
    - probably well suited for WSDL(soap) esb.front <--> REST esb.back-end
        - wsdl 1 :  
                    * more probable in integra project since we will use wsdl-1
                    routing to REST backend can be done using SWITCH mediator,
                    evaluating the soap action [expression : get-property('Action')] in the soap header
                    
        - wsdl-2 :  
                    * not tested
                    (old name for wsdl-2 is wsdl-1.2)
                    use the http binding to connect directly to REST 
  API
    - useful for grouping disparate^[change-term?] resources
      context   : - first sub-url in after server:port/
                  - independent of the url patterns in the endpoint
      resource  : - the next actually-existing sub url-resource after the endpoint specified
        
        example:
          
          Assumptions :
                actual server url addresses [1 or more domains (server-names)]
                  http://server_APP01.com:8080/tasks             --  [detailed]  listing of 'all' tasks
                  http://server_APP01.com:8080/tasks/completed   --  [simple]    listing of 'completed' tasks
                  http://server_APP02.com:8080/users             --  [detailed]  listing of 'all' users
                  http://server_APP02.com:8080/users/admin       --  [simple]    listing of 'admin' users
                  
                Ideal [single-domain] esb.front REST urls to be designed in ESB-API  
                  http://server_ESB:8280/integra/tasks
                  http://server_ESB:8280/integra/tasks/completed
                  http://server_ESB:8280/integra/users
                  http://server_ESB:8280/integra/users/admin
          ESB settings      
                  context               /integra
                  resource 
                        simple:
                            resource A.001 :      /tasks*             GET POST  - not ideal
                            resource B.001 :      /users*             GET POST  - not ideal
                        detailed:
                            *and illlustrates more the purpose of API-resources
                            resource A.001 :      /tasks              GET,POST
                            resource A.002 :      /tasks/completed    GET ony
                            resource B.001 :      /users              GET,POST
                            resource B.002 :      /users/admin        GET only

Properties on ESB
  Definitions
  
  Scopes
    Synapse   - accessible both in and out sequences
                  example :   payload mediator set in in sequence will be accessible in out sequence 
    Axis*     - property / payload will lives only in 'IN sequence' or 'OUT sequence'
    
                

