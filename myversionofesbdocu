

Service Bus [ESB Features]

  1)  Sequences
  2)  API
  
  * NOTEs
      Mediators
        Core
          - Payload
              - if set in the in-sequence, will still persist in the out-sequence 
                unless there is a response(actual-payload) from a succeeeding sent mediator
              - so adding a </loopback> after a payload-mediator in the sequence will cause the payload to be transferred to the out-sequence
          - Send
              setting an explicit-but-empty out sequence without a </send> will result to no data returned to client/user
                - this is only true for codes autogenerated when editing in dev-studio then deploying to esb-server
          - Enrich
              two main properties
                  - source :
                     replace target (the existing payload or even properties) with source (inline xml or payload-subelement[s])
                     
                  - target: 
                    
                    * seems to not work when specifying root "/" target or r
                            /jsonObject also seems to not work
                    * hierarchy of xml and json elements will look different... check-out "../ESB490/JSON+Support" 
                
              * setting clone=true seems to have no difference on the output
                  - seems to better called 'clonable' 
              * envelope, body etc. can be only accessed if the payload/etc. is SOAP
                  - no equivalent for non-SOAP messages, accessing SOAP tag will just result to error or just a tag with no content
          
          
          
      Generic Propert(ies)
        1. messageType
              - should be in the outsequence... 
                  - case-insensitive for ESB as long as value in('application/json','application/xml','text/json','text/xml'
                      - clients such as advanced-rest client will prefer lower-case and 'application/*' instead of unofficial 'text/*'
                  - invalid value="" will default to xml-format
                    - lack of forward-slash character renders this property not effective
              - should not be in the in-sequence else there will be no effect to the output-response-format
              - scope should be "axis2", if scope is default "synapse" this property has no effect



How to expose ESB:

  Proxies
    - probably well suited for WSDL(soap) esb.front <--> REST esb.back-end
        - wsdl 1 :  
                    * more probable in integra project since we will use wsdl-1
                    routing to REST backend can be done using SWITCH mediator,
                    evaluating the soap action [expression : get-property('Action')] in the soap header
                    
        - wsdl-2 :  
                    * not tested
                    (old name for wsdl-2 is wsdl-1.2)
                    use the new http binding feature to connect directly to REST 
  API
    - useful for grouping disparate^[change-term?] resources
      context   : - first sub-url after server:port/, like 'tasks' at the end of 'jsonserver.org:80/tasks'
                  - independent of the url patterns in the endpoint
      resource  : - the next actually-existing sub url-resource after the endpoint specified
        
        example:
          
          Assumptions :
                actual server url addresses [1 or more domains (server-names)]
                  http://server_APP01.com:8080/tasks             --  [detailed]  listing of 'all' tasks
                  http://server_APP01.com:8080/tasks/completed   --  [simple]    listing of 'completed' tasks only
                  http://server_APP02.com:8080/users             --  [detailed]  listing of 'all' users
                  http://server_APP02.com:8080/users/admin       --  [simple]    listing of 'admin' users only
                  
                Ideal [single-domain] esb.front REST urls to be designed in ESB-API  
                     servers server_APP01 and server_APP02 were combined
                  http://server_ESB:8280/integra/tasks
                  http://server_ESB:8280/integra/tasks/completed
                  http://server_ESB:8280/integra/users
                  http://server_ESB:8280/integra/users/admin
                  
          ESB settings      
                  context               /integra
                  resource 
                        simple:
                            resource A.001 :      /tasks*             GET POST  - not ideal
                            resource B.001 :      /users*             GET POST  - not ideal
                               - asterisk will cause the pattern to match other combinations 
                                 it will function as catch all default
                        detailed:
                            *and illlustrates more the purpose of API-resources
                            resource A.001 :      /tasks              GET,POST
                            resource A.002 :      /tasks/completed    GET ony
                            resource B.001 :      /users              GET,POST
                            resource B.002 :      /users/admin        GET only
    
    
    URL-style:
      a. URL-template
          design            : localhost:8280/integra/status/{orderId}
          actual url called : localhost:8280/integra/status/1
          
          ??? this can be combined with ?queryParams=value ???URL_POSTFIX??? 
          
          
      b. URL-mapping
          desired matches : /test/*
      
          * combining url-mapping with ?queryParams=value seems to be not allowed...
            when the url entered satisfies both /{mappedSubUrl} and ?parameter... 
            ... properties below will be null/blank:
                  get-property('uri.var.taskid')
                  get-property('query.param.searchstr')
      

Properties on ESB
  Definitions
  
  Scopes
    Synapse   - accessible both in and out sequences
                  example :   payload mediator set in in sequence will be accessible in out sequence 
    Axis*     - property / payload will lives only in 'IN sequence' or 'OUT sequence'
    
                
Deployment : 

    Ways to start the ESB server : 
        (1) run /bin/wso2server.sh
              - logs will be on the terminal
        (2) add a [local] server on DeveloperStudio
              - logs will be on the DeveloperStudio terminal
        (3) add a [remote] server on DeveloperStudio
              - logs will be on the DeveloperStudio terminal
      
    Ways to deploy CAR (Carbon Applications)  
        (1) right click the CAR under the server tab on Developer Studio and click 'Deploy'
        (2) copy the .car file to the server folder CARBON_HOME/repository/../deployment/../server/carbonapps/
              -  Carbon will detect the new file in the file-system folder /carbonapps/ then deploy the files inside
              - deleting the .car file will also cause the previously deployed contents to be deleted as well
              
